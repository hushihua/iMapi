// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name iMApi
import AWSS3
import Compression
import Swift
import UIKit
@_exported import iMApi
import iPush
import zlib
open class CUSystemItem : iMApi.CUContentItem, Swift.Codable {
  public var chatId: Swift.String?
  public var tips: Swift.String?
  public var type: Swift.Int?
  public var username: Swift.String?
  public var nickname: Swift.String?
  public var zhCnStr: Swift.String?
  public var enStr: Swift.String?
  public var kmStr: Swift.String?
  public var userList: [iMApi.CUUserInfo]
  public var roomId: Swift.String?
  public var roomStatus: Swift.Int?
  public var audioOnly: Swift.Int?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public func getText() -> Swift.String?
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUSystemItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class CUVideoItem : iMApi.CUContentItem, Swift.Codable {
  public var clip: iMApi.VideoPlayInfo?
  public var thumb: iMApi.VideoShowInfo?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUVideoItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class VideoPlayInfo : ObjectiveC.NSObject, Swift.Codable {
  public var size: Swift.Double?
  public var duration: Swift.Double?
  public var name: Swift.String?
  public var realname: Swift.String?
  public var url: Swift.String?
  public var localUrl: Foundation.URL?
  public var hashStr: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class VideoShowInfo : ObjectiveC.NSObject, Swift.Codable {
  public var size: Swift.Double?
  public var width: CoreGraphics.CGFloat?
  public var height: CoreGraphics.CGFloat?
  public var name: Swift.String?
  public var realname: Swift.String?
  public var url: Swift.String?
  public var type: Swift.String?
  public var hashStr: Swift.String?
  public var localImgData: Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUGifStickerItem : ObjectiveC.NSObject, iMApi.CUContentItem, Swift.Codable {
  public var stickerId: Swift.String?
  public var type: Swift.Int
  public var width: Swift.Int
  public var height: Swift.Int
  public var url: Swift.String?
  @objc override dynamic public init()
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUGifStickerItem
  public static func parseToList(_ dict: [Swift.String : Any]) -> [iMApi.CUGifStickerItem]
  public func encode(with coder: Foundation.NSCoder)
  required public init?(coder: Foundation.NSCoder)
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUGifStickerItem?
  public func objectToJson() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class CUMessageResponse : ObjectiveC.NSObject {
  public var total: Swift.Int?
  public var list: [iMApi.CUMessage]?
  public var haveNext: Swift.Bool?
  public var offset: Swift.Int?
  public var pageSize: Swift.Int?
  public var seqId: Swift.Int?
  public var chatId: Swift.String?
  public var chatType: Swift.Int?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUMessageResponse?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CURtcItem : ObjectiveC.NSObject, iMApi.CUContentItem, Swift.Codable {
  public var status: Swift.Int?
  public var type: Swift.String?
  public var duration: Swift.String
  @objc override dynamic public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  #warning("以后改成范型")
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CURtcItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUFriendInfo : ObjectiveC.NSObject, Swift.Codable {
  public var uid: Swift.String?
  public var username: Swift.String?
  public var status: Swift.Int?
  public var chatId: Swift.String?
  public var addTime: Swift.Double?
  public var isMute: Swift.Int?
  public var mutualGroupCount: Swift.Int?
  public var actionStatus: Swift.Int?
  public var info: iMApi.CUUserInfo?
  public var threeDayStr: Swift.String?
  public static func parseToArray(_ dict: [Swift.String : Any]) -> [[iMApi.CUFriendInfo]]
  public static func parseToArray(_ list: Swift.Array<[Swift.String : Any]>, str: Swift.String? = nil) -> [iMApi.CUFriendInfo]
  public static func parseToObject(_ dict: [Swift.String : Any], str: Swift.String? = nil) -> iMApi.CUFriendInfo?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class CUFileItem : iMApi.CUContentItem, Swift.Codable {
  public var url: Swift.String?
  public var name: Swift.String?
  public var type: Swift.String?
  public var hash: Swift.String?
  public var realname: Swift.String?
  public var size: Swift.Double?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUFileItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol LMPNotificationLinstner {
  func onNotificationReceive(item: iPush.PHCMDItem)
}
@_inheritsConvenienceInitializers public class CUManager : iMApi.CUHttpClient, iPush.PHSocketHandler {
  public static func getInstance() -> iMApi.CUManager
  public var linstener: iMApi.LMPNotificationLinstner?
  public func onEventHandler(notification: iPush.PHCMDItem)
  public func loadConfig(handler: @escaping (iPush.PHResponse<iMApi.CUConfig>) -> Swift.Void)
  public func parseQRCode(code: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUQrcodeResponse>) -> Swift.Void)
  public func qrcodeLogin(code: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Int>) -> Swift.Void)
  public class func resignActive()
  public class func enterBackground()
  public class func enterForeground()
  @objc override dynamic public init()
  @objc deinit
}
open class CUAudioItem : iMApi.CUContentItem, Swift.Codable {
  public var name: Swift.String?
  public var duration: Swift.Double?
  public var size: Swift.Double?
  public var url: Swift.String?
  public var localAmrFileUrl: Swift.String?
  public var localWavFileUrl: Swift.String?
  public var playState: Swift.Int
  public var forcePlay: Swift.Int
  public var voicePrintData: Foundation.Data?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUAudioItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class CUMessage : ObjectiveC.NSObject, Foundation.NSCoding {
  open var messageId: Swift.String?
  open var formuid: Swift.String?
  open var nickName: Swift.String?
  open var chatId: Swift.String?
  open var seq: Swift.Int
  open var type: Swift.Int?
  open var UUID: Swift.String?
  open var isRead: Swift.Bool?
  open var status: Swift.Int?
  open var addTime: Swift.Double?
  open var version: Swift.Int
  open var item: iMApi.CUContentItem?
  open var isEdit: Swift.Bool
  open var editTime: Swift.Double?
  open var isForward: Swift.Bool?
  open var forwardMessageId: Swift.String?
  open var forward: iMApi.CUMessage?
  open var isReply: Swift.Bool?
  open var replyMessageId: Swift.String?
  open var reply: iMApi.CUMessage?
  @objc override dynamic public init()
  public func toSendParams() -> [Swift.String : Any]
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUMessage?
  public static func parseToArray(_ list: Swift.Array<[Swift.String : Any]>) -> [iMApi.CUMessage]
  @objc required public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc deinit
}
extension CUMessage {
  public func itemToJson() -> Swift.String
  public class func jsonToItem(type: Swift.Int, json: Swift.String) -> iMApi.CUContentItem?
}
@objc @_inheritsConvenienceInitializers public class CUUploadRequest : ObjectiveC.NSObject {
  public var file: Swift.String?
  public var size: Swift.Double?
  public var width: Swift.Double?
  public var height: Swift.Double?
  public var type: Swift.String?
  public var hashStr: Swift.String?
  public var realname: Swift.String?
  public var duration: Swift.Double?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUFavStickerItem : ObjectiveC.NSObject {
  public var favId: Swift.String?
  public var status: Swift.Int
  public var addTime: Swift.Double
  public var item: iMApi.CUStickerItem?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUFavStickerItem
  public static func parseToList(_ dict: [Swift.String : Any]) -> [iMApi.CUFavStickerItem]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUFavStickerGroup : ObjectiveC.NSObject {
  public var favId: Swift.String?
  public var status: Swift.Int
  public var addTime: Swift.Double
  public var item: iMApi.CUSticierGroup?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUFavStickerGroup
  public static func parseToList(_ dict: [Swift.String : Any]) -> [iMApi.CUFavStickerGroup]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUQrcodeResponse : ObjectiveC.NSObject {
  public var type: Swift.Int
  public var status: Swift.Int
  public var data: [Swift.String : Any]?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUQrcodeResponse
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUFavGifSticker : ObjectiveC.NSObject {
  public var favId: Swift.String?
  public var status: Swift.Int
  public var addTime: Swift.Double
  public var item: iMApi.CUGifStickerItem?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUFavGifSticker
  public static func parseToList(_ dict: [Swift.String : Any]) -> [iMApi.CUFavGifSticker]
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CUStickerManager : iMApi.CUHttpClient {
  public static func getInstance() -> iMApi.CUStickerManager
  public func getMyStickerGroup(offset: Swift.Int, snapId: Swift.String?, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUStickerResponse<iMApi.CUFavStickerGroup>>) -> Swift.Void)
  public func getStickerItems(groupId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUSticierGroup>) -> Swift.Void)
  public func addSticketGroup(groupId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavStickerGroup>>) -> Swift.Void)
  public func remove(groupId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavStickerGroup>>) -> Swift.Void)
  public func collect(stickerId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavStickerItem>>) -> Swift.Void)
  public func remvoeCollect(stickerId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavStickerItem>>) -> Swift.Void)
  public func getFavStickerList(offset: Swift.Int, snapId: Swift.String?, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUStickerResponse<iMApi.CUFavStickerItem>>) -> Swift.Void)
  public func getStickerGroups(key: Swift.String?, offset: Swift.Int, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<[iMApi.CUSticierGroup]>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol CUUserManagerListener {
  func onNewMessageNotification(model: Swift.Int, chatId: Swift.String, type: Swift.Int)
  func onApplyRequestNotifiction(model: Swift.Int, userName: Swift.String)
  func onApplyResponseNotification(model: Swift.Int, chatId: Swift.String, userName: Swift.String)
}
@_inheritsConvenienceInitializers public class CUUserManager : iMApi.CUHttpClient {
  public static func getInstance() -> iMApi.CUUserManager
  public var listener: iMApi.CUUserManagerListener?
  public func onEnterForegroud()
  public func onEnterBackground()
  public func onReceiveNotification(notifiation: UserNotifications.UNNotification) -> Swift.Bool
  public func refreshToken(token: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CULoginResponse>) -> Swift.Void)
  public func idLogin(uid: Swift.String, password: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CULoginResponse>) -> Swift.Void)
  public func requestCode(areaCode: Swift.String, phone: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func updateUserInfo(info: iMApi.CUUserInfo, handler: @escaping (iPush.PHResponse<iMApi.CUUserInfo>) -> Swift.Void)
  public func completeInfo(nickName: Swift.String, avatar: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUUserInfo>) -> Swift.Void)
  public func updateAvatar(avatar: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUUserInfo>) -> Swift.Void)
  public func updatePassword(newPassword: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUUserInfo>) -> Swift.Void)
  public func logout(handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func loadUserInfo(uids: Swift.String, handler: @escaping (iPush.PHResponse<[iMApi.CUUserInfo]>) -> Swift.Void)
  public func loadUserInfo(handler: @escaping (iPush.PHResponse<iMApi.CUUserInfo>) -> Swift.Void)
  public func searchUser(keyword: Swift.String, handler: @escaping (iPush.PHResponse<[iMApi.CUFriendInfo]>) -> Swift.Void)
  public func getQRCodeUrl(handler: @escaping (iPush.PHResponse<Swift.String>) -> Swift.Void)
  public func getReqChangePhoneCode(areaCode: Swift.String, phoneNum: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func changePhoneNumber(areaCode: Swift.String, phoneNum: Swift.String, verCode: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func updateSetting(sOnline: Swift.Bool, sInputing: Swift.Bool, sReaded: Swift.Bool, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func getSetting(handler: @escaping (iPush.PHResponse<iMApi.CUSetting>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol CUContentItem : Swift.Decodable, Swift.Encodable {
  func toSendParam() -> [Swift.String : Any]
  static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
}
@objc @_inheritsConvenienceInitializers public class CUSetting : ObjectiveC.NSObject, Foundation.NSCoding {
  public var onlineSwitch: Swift.Bool
  public var inputingSwitch: Swift.Bool
  public var readedSwitch: Swift.Bool
  @objc override dynamic public init()
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUSetting
  @objc deinit
}
@_inheritsConvenienceInitializers public class CUHttpClient : iPush.PHHttpClient {
  override public func getCommonParams() -> Swift.Dictionary<Swift.String, Swift.String>
  override public func requestPost(requestUrl: Swift.String, params: Swift.Dictionary<Swift.String, Any>, handler: @escaping (iPush.PHResponse<Any>) -> Swift.Void)
  public func checkSessionError(errorCode: Swift.Int, jsonObject: Swift.Dictionary<Swift.String, Any>) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RoomCallingState : ObjectiveC.NSObject, Swift.Codable {
  public var chatId: Swift.String?
  public var tips: Swift.String?
  public var roomId: Swift.String?
  public var roomStatus: Swift.Int?
  public var audioOnly: Swift.Int?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.RoomCallingState?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUSession : ObjectiveC.NSObject, Swift.Codable {
  public var chatId: Swift.String?
  public var queueType: Swift.Int?
  public var title: Swift.String?
  public var avatar: Swift.String?
  public var avatarUrl: Swift.String?
  public var avatarColor: Swift.String?
  public var unreadCount: Swift.Int
  public var atMsgIds: [Swift.String]?
  public var enableTime: Swift.Double?
  public var topping: Swift.Int
  public var userCount: Swift.Int?
  public var lastSeq: Swift.Int?
  public var lastReadSeq: Swift.Int?
  public var readState: Swift.Int?
  public var lastMsgReadStatus: Swift.Int?
  public var addTime: Swift.Double?
  public var replyTime: Swift.Int64?
  public var seeionsReadStatus: Swift.Int
  public var lasMsgInfo: iMApi.LLastMsgInfo?
  public var isMute: Swift.Bool?
  public var pinTime: Swift.Int64
  public var members: [iMApi.CURole]?
  public var friend: iMApi.CUFriendInfo?
  public var rtcInfo: iMApi.RoomCallingState?
  public static func parseToArray(_ array: Swift.Array<[Swift.String : Any]>) -> [iMApi.CUSession]
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUSession?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class LLastMsgInfo : ObjectiveC.NSObject, Swift.Codable {
  public var nickname: Swift.String?
  public var chatId: Swift.String?
  public var addtime: Swift.Double
  public var contentText: Swift.String?
  public var fromuid: Swift.String?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.LLastMsgInfo?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.LLastMsgInfo?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class SessionPinModel : ObjectiveC.NSObject, Swift.Codable {
  public var pinTime: Swift.Int64?
  public var chatId: Swift.String?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.SessionPinModel?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public protocol CUChatLinstner {
  func onConnectionOn()
  func onReceiveMessage(chatId: Swift.String, message: iMApi.CUMessage, type: Swift.Int)
  func onMessageReaded(chatId: Swift.String, msgId: Swift.String)
  func onDelete(chatId: Swift.String, msgId: Swift.String)
}
@_inheritsConvenienceInitializers public class CUChatManager : iMApi.CUHttpClient, iPush.PHSocketHandler {
  public static func getInstance() -> iMApi.CUChatManager
  public var listener: iMApi.CUChatLinstner?
  public func onEventHandler(notification: iPush.PHCMDItem)
  public func sendInputing(chatId: Swift.String)
  public func sendCalling(_ value: Swift.String)
  public func sendMessage(message: iMApi.CUMessage, handler: @escaping (iPush.PHResponse<iMApi.CUMessage>) -> Swift.Void)
  public func delete(messageIds: [Swift.String], type: Swift.Int, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func markReaded(chatId: Swift.String, msgId: Swift.String, msgTime: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func checkVersion(chatId: Swift.String, ids: Swift.String, handler: @escaping (iPush.PHResponse<[iMApi.CUMessage]>) -> Swift.Void)
  public func loadSeqBelow(chatId: Swift.String, seq: Swift.Int, offset: Swift.Int, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUMessageResponse?>) -> Swift.Void)
  public func loadHistory(chatId: Swift.String, seq: Swift.Int, offset: Swift.Int, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUMessageResponse?>) -> Swift.Void)
  public func loadHistorySnapshot(messageId: Swift.String, pageSize: Swift.Int, offset: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUMessageResponse?>) -> Swift.Void)
  public func requestNewUrl(filename: Swift.String, handler: @escaping (iPush.PHResponse<Swift.String?>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUStranger : ObjectiveC.NSObject {
  public var uid: Swift.String?
  public var chatId: Swift.String?
  public var avatar: Swift.String?
  public var nickName: Swift.String?
  public var appKey: Swift.String?
  public var avatarUrl: Swift.String?
  public var isOnline: Swift.Int
  public var lastSeen: Swift.Double?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUStranger?
  public static func parseToArray(_ list: Swift.Array<[Swift.String : Any]>) -> [iMApi.CUStranger]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUScanCodeLoginResponse : ObjectiveC.NSObject {
  public var deviceName: Swift.String
  public var time: Swift.Double
  public var loginCode: Swift.String
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUScanCodeLoginResponse?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CURole : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCoding {
  public var type: Swift.Int?
  public var uid: Swift.String?
  public var addTime: Swift.Double?
  public var info: iMApi.CUUserInfo?
  public var lastInpuTimeStap: Swift.Double
  public var enable: Swift.Bool
  public var isSelect: Swift.Bool
  @objc override dynamic public init()
  public static func parseToArray(_ list: Swift.Array<[Swift.String : Any]>) -> [iMApi.CURole]
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CURole?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CURole?
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
open class CULocationItem : iMApi.CUContentItem, Swift.Codable {
  public var lng: Swift.Double?
  public var lat: Swift.Double?
  public var address: Swift.String?
  public var scale: Swift.String?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CULocationItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CULoginResponse : ObjectiveC.NSObject, Foundation.NSCoding {
  public var userInfo: iMApi.CUUserInfo?
  public var newUser: Swift.Bool
  public var websocketUrl: Swift.String?
  public var accessToken: Swift.String?
  public var refreshToken: Swift.String?
  public var setting: iMApi.CUSetting?
  @objc override dynamic public init()
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CULoginResponse?
  @objc public func encode(with coder: Foundation.NSCoder)
  @objc required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
open class CUCustomerItem : iMApi.CUContentItem, Swift.Codable {
  public var custom: Swift.String?
  public var customDesc: Swift.String?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUCustomerItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUConfig : ObjectiveC.NSObject {
  public var stickerFavVersion: Swift.Int
  public var gifFavVersion: Swift.Int
  public var myStickerListVersion: Swift.Int
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUConfig?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CUStickerResponse<T> : ObjectiveC.NSObject {
  public var version: Swift.Int?
  public var list: [T]
  public var haveNext: Swift.Bool
  public var snapId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
extension CUChatManager {
  public func getUploadKeys(handler: @escaping (iPush.PHResponse<Any>) -> ())
  public func uploadFileCallBack(requestInfo: iMApi.CUUploadRequest, handler: @escaping (iPush.PHResponse<Any>) -> Swift.Void)
}
extension CUChatManager {
  public func configAWS()
  public func resetConfigAWS(handler: @escaping (Swift.Bool) -> (Swift.Void))
  public func startUpload(key: Swift.String, fileType: Swift.String, data: Foundation.Data, progressBlock: @escaping (iMApi.CUAWSTask) -> (Swift.Void), finishBlock: @escaping (iMApi.CUAWSTask) -> (Swift.Void))
}
extension CUChatManager {
  public func deleteTaskInfo(key: Swift.String)
  public func saveTaskInfo(key: Swift.String, request: AWSS3.AWSS3TransferManagerUploadRequest?)
  public func getTaskInfo(key: Swift.String, handler: (iMApi.CUAWSTask?) -> (Swift.Void))
}
@objc @_inheritsConvenienceInitializers public class CUUnread : ObjectiveC.NSObject {
  public var chatId: Swift.String?
  public var unreadCount: Swift.Int
  public var uid: Swift.String?
  public var avatarUrl: Swift.String?
  public var isOnline: Swift.Bool
  public var lastSeen: Swift.Double?
  public var nickName: Swift.String?
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUUnread
  @objc override dynamic public init()
  @objc deinit
}
public protocol CUFriendshipLinstner {
  func onConnectionOn()
  func onApplyRequire(reqCount: Swift.Int, info: iMApi.CUFriendInfo)
  func onApplyResponse(info: iMApi.CUFriendInfo)
  func onOnlineStateChange(uid: Swift.String, isOnline: Swift.Bool, time: Swift.Double)
  func onRemarkNameChange(uid: Swift.String, remark: Swift.String)
  func onFriendInfoChange(info: iMApi.CUUserInfo)
  func onDelete(uid: Swift.String, status: Swift.Int)
}
@_inheritsConvenienceInitializers public class CUFriendshipManager : iMApi.CUHttpClient, iPush.PHSocketHandler {
  public static func getInstance() -> iMApi.CUFriendshipManager
  public var listener: iMApi.CUFriendshipLinstner?
  public func onEventHandler(notification: iPush.PHCMDItem)
  public func loadFriendList(status: Swift.Int = 1, handler: @escaping (iPush.PHResponse<[iMApi.CUFriendInfo]>) -> Swift.Void)
  public func loadReviewList(handler: @escaping (iPush.PHResponse<[iMApi.CUFriendInfo]>) -> Swift.Void)
  public func loadReviewListV2(handler: @escaping (iPush.PHResponse<[[iMApi.CUFriendInfo]]>) -> Swift.Void)
  public func loadFriendDetail(frienduid: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUFriendInfo?>) -> Swift.Void)
  public func requestFriends(frienduid: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func approveFriend(frienduid: Swift.String, status: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func deleteFriend(frienduid: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func blackFriend(frienduid: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func removeBlackFriend(frienduid: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func setFriendNoteName(frienduid: Swift.String, noteName: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func searchContactFriends(phones: [Any], handler: @escaping (iPush.PHResponse<[iMApi.CUFriendInfo]>) -> Swift.Void)
  public func getFriendUnreadCount(handler: @escaping (iPush.PHResponse<Swift.Int>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
open class CUImageItem : iMApi.CUContentItem, Swift.Codable {
  public var url: Swift.String?
  public var name: Swift.String?
  public var type: Swift.String?
  public var hash: Swift.String?
  public var width: CoreGraphics.CGFloat
  public var height: CoreGraphics.CGFloat
  public var size: Swift.Double?
  public var realname: Swift.String?
  public var t_url: Swift.String?
  public var t_name: Swift.String?
  public var t_type: Swift.String?
  public var t_hash: Swift.String?
  public var t_width: CoreGraphics.CGFloat
  public var t_height: CoreGraphics.CGFloat
  public var t_size: Swift.Double?
  public var t_realname: Swift.String?
  public var imageData: Foundation.Data?
  public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUImageItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUAWSTask : ObjectiveC.NSObject {
  public var task: Any?
  public var fileKey: Swift.String?
  public var totalUnitCount: Swift.Int64
  public var completedUnitCount: Swift.Int64
  public var state: Swift.Int
  public var isSuccess: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUUserInfo : ObjectiveC.NSObject, Swift.Codable, Foundation.NSCoding {
  public var uid: Swift.String?
  public var userName: Swift.String?
  public var password: Swift.String?
  public var appKey: Swift.String?
  public var avatar: Swift.String?
  public var avatarUrl: Swift.String?
  public var nickName: Swift.String?
  public var noteName: Swift.String?
  public var birthday: Swift.String?
  public var signature: Swift.String?
  public var gender: Swift.Int?
  public var region: Swift.String?
  public var address: Swift.String?
  public var isOnline: Swift.Bool
  public var lastOnlineTime: Swift.Double?
  public var phoneAreacode: Swift.String?
  public var phoneNumber: Swift.String?
  public var usernameIsEdited: Swift.Int?
  public var passwordIsEdited: Swift.Int?
  @objc public var contactName: Swift.String?
  @objc override dynamic public init()
  @objc required public init?(coder: Foundation.NSCoder)
  @objc public func encode(with coder: Foundation.NSCoder)
  public func toParams() -> [Swift.String : Any]
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUUserInfo?
  public static func parseToArray(_ list: Swift.Array<[Swift.String : Any]>) -> [iMApi.CUUserInfo]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension CUUserInfo {
  public func getDisplayName() -> Swift.String
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUUserInfo?
}
extension CUStickerManager {
  public func getMyGifList(offset: Swift.Int, snapId: Swift.String?, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUStickerResponse<iMApi.CUFavGifSticker>>) -> Swift.Void)
  public func searchGif(key: Swift.String?, offset: Swift.Int, pageSize: Swift.Int, handler: @escaping (iPush.PHResponse<iMApi.CUStickerResponse<iMApi.CUGifStickerItem>>) -> Swift.Void)
  public func addGifFav(stickerId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavGifSticker>>) -> Swift.Void)
  public func removeGifFav(stickerId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUStickerModifyResopnse<iMApi.CUFavGifSticker>>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers open class CUTextItem : ObjectiveC.NSObject, iMApi.CUContentItem, Swift.Codable {
  public var cellType: Swift.Int
  public var text: Swift.String?
  @objc override dynamic public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUTextItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers open class CUMergeForwardItem : ObjectiveC.NSObject, iMApi.CUContentItem, Swift.Codable {
  public var cellType: Swift.Int
  public var text: Swift.String?
  public var title: Swift.String?
  public var messageIds: [Swift.String]
  @objc override dynamic public init()
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public func objectToJson() -> Swift.String
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUMergeForwardItem?
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class CUSticierGroup : ObjectiveC.NSObject {
  public var groupId: Swift.String?
  public var title: Swift.String?
  public var iconUrl: Swift.String?
  public var itemCount: Swift.Int
  public var downloadUrl: Swift.String?
  public var items: [iMApi.CUStickerItem]
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUSticierGroup
  public static func parseToList(_ array: [[Swift.String : Any]]) -> [iMApi.CUSticierGroup]
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CUStickerItem : ObjectiveC.NSObject, iMApi.CUContentItem, Swift.Codable {
  public var stickerId: Swift.String?
  public var groupId: Swift.String?
  public var emoji: Swift.String?
  public var url: Swift.String?
  public var name: Swift.String?
  public var type: Swift.String?
  public var md5: Swift.String?
  public var width: Swift.Int
  public var height: Swift.Int
  public var size: Swift.Int
  public var realName: Swift.String?
  @objc override dynamic public init()
  public static func parseToObject(_ dict: [Swift.String : Any]) -> iMApi.CUStickerItem
  public static func parseToList(_ dict: [Swift.String : Any]) -> [iMApi.CUStickerItem]
  public func encode(with coder: Foundation.NSCoder)
  required public init?(coder: Foundation.NSCoder)
  public func toSendParam() -> [Swift.String : Any]
  public static func parseToItem(_ dict: [Swift.String : Any], _ type: Swift.Int) -> iMApi.CUContentItem?
  public class func jsonToObject(jsonStr: Swift.String) -> iMApi.CUStickerItem?
  public func objectToJson() -> Swift.String
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class Constant : ObjectiveC.NSObject {
  public static var uid: Swift.String?
  public static var ACCESS_TOKEN: Swift.String? {
    get
    set
  }
  public static var REFRESH_TOKEN: Swift.String? {
    get
    set
  }
  public static var bucket: Swift.String {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CUStickerModifyResopnse<T> : ObjectiveC.NSObject {
  public var version: Swift.Int?
  public var item: T?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class IMApi : ObjectiveC.NSObject {
  public static func getInstance() -> iMApi.IMApi
  public var DEBUG: Swift.Int {
    get
    set
  }
  public func initSdk(appKey: Swift.String)
  public func logout(handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
public protocol CUSessionLinstner {
  func onConnectionOn()
  func onUploading(chatId: Swift.String, uid: Swift.String, status: Swift.Int)
  func onInputting(chatId: Swift.String, uid: Swift.String, time: Swift.Double)
  func onSettingChange(chatId: Swift.String, isMute: Swift.Bool, pin: Swift.Int)
  func onDelete(chatId: Swift.String, time: Swift.Double)
  func onSessionRead(chatId: Swift.String, status: Swift.Int)
}
@_inheritsConvenienceInitializers public class CUSessionManager : iMApi.CUHttpClient, iPush.PHSocketHandler {
  public static func getInstance() -> iMApi.CUSessionManager
  public var listener: iMApi.CUSessionLinstner?
  public func onEventHandler(notification: iPush.PHCMDItem)
  public func setOnlineState()
  public func setOfflineState()
  public func loadSessionList(handler: @escaping (iPush.PHResponse<[iMApi.CUSession]>) -> Swift.Void)
  public func loadSessionList(needUser: Swift.Bool, handler: @escaping (iPush.PHResponse<[iMApi.CUSession]>) -> Swift.Void)
  public func deleteSession(chatId: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func toppingSession(chatId: Swift.String, pin: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.SessionPinModel>) -> Swift.Void)
  public func muteSession(chatId: Swift.String, muteStatus: Swift.Int, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func loadSessionInfo(chatId: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUSession>) -> Swift.Void)
  public func loadSessionInfo(chatId: Swift.String, needUser: Swift.Bool, handler: @escaping (iPush.PHResponse<iMApi.CUSession>) -> Swift.Void)
  public func loadSessionInfo(fromUid: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUSession>) -> Swift.Void)
  public func getUnread(handler: @escaping (iPush.PHResponse<iMApi.CUUnread>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class CUGroupManager : iMApi.CUHttpClient {
  public static func getInstance() -> iMApi.CUGroupManager
  public func createGroup(title: Swift.String, avatar: Swift.String, users: [Swift.String], handler: @escaping (iPush.PHResponse<iMApi.CUSession>) -> Swift.Void)
  public func invint(chatId: Swift.String, users: [Swift.String], handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func kick(chatId: Swift.String, users: [Swift.String], handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func quit(chatId: Swift.String, masterUser: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func updateInfo(chatId: Swift.String, title: Swift.String, avatar: Swift.String, handler: @escaping (iPush.PHResponse<iMApi.CUSession>) -> Swift.Void)
  public func groupSameList(friendUid: Swift.String, handler: @escaping (iPush.PHResponse<[iMApi.CUSession]>) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
extension CUFriendshipManager {
  public func blackChat(chatId: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func removeBlackChat(chatId: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Bool>) -> Swift.Void)
  public func getBlackChatList(handler: @escaping (iPush.PHResponse<[iMApi.CUStranger]>) -> Swift.Void)
  public func checkBlackState(chatId: Swift.String, uid: Swift.String, handler: @escaping (iPush.PHResponse<Swift.Int>) -> Swift.Void)
}
